// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  choice: (where?: ChoiceWhereInput) => Promise<boolean>;
  quiz: (where?: QuizWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  choice: (where: ChoiceWhereUniqueInput) => ChoiceNullablePromise;
  choices: (args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Choice>;
  choicesConnection: (args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChoiceConnectionPromise;
  quiz: (where: QuizWhereUniqueInput) => QuizNullablePromise;
  quizzes: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Quiz>;
  quizzesConnection: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuizConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChoice: (data: ChoiceCreateInput) => ChoicePromise;
  updateChoice: (args: {
    data: ChoiceUpdateInput;
    where: ChoiceWhereUniqueInput;
  }) => ChoicePromise;
  updateManyChoices: (args: {
    data: ChoiceUpdateManyMutationInput;
    where?: ChoiceWhereInput;
  }) => BatchPayloadPromise;
  upsertChoice: (args: {
    where: ChoiceWhereUniqueInput;
    create: ChoiceCreateInput;
    update: ChoiceUpdateInput;
  }) => ChoicePromise;
  deleteChoice: (where: ChoiceWhereUniqueInput) => ChoicePromise;
  deleteManyChoices: (where?: ChoiceWhereInput) => BatchPayloadPromise;
  createQuiz: (data: QuizCreateInput) => QuizPromise;
  updateQuiz: (args: {
    data: QuizUpdateInput;
    where: QuizWhereUniqueInput;
  }) => QuizPromise;
  updateManyQuizzes: (args: {
    data: QuizUpdateManyMutationInput;
    where?: QuizWhereInput;
  }) => BatchPayloadPromise;
  upsertQuiz: (args: {
    where: QuizWhereUniqueInput;
    create: QuizCreateInput;
    update: QuizUpdateInput;
  }) => QuizPromise;
  deleteQuiz: (where: QuizWhereUniqueInput) => QuizPromise;
  deleteManyQuizzes: (where?: QuizWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  choice: (
    where?: ChoiceSubscriptionWhereInput
  ) => ChoiceSubscriptionPayloadSubscription;
  quiz: (
    where?: QuizSubscriptionWhereInput
  ) => QuizSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ChoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC";

export type QuizOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChoiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChoiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  quiz?: Maybe<QuizWhereInput>;
  AND?: Maybe<ChoiceWhereInput[] | ChoiceWhereInput>;
}

export interface QuizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  choices_some?: Maybe<ChoiceWhereInput>;
  AND?: Maybe<QuizWhereInput[] | QuizWhereInput>;
}

export type QuizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChoiceCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  quiz: QuizCreateOneWithoutChoicesInput;
}

export interface QuizCreateOneWithoutChoicesInput {
  create?: Maybe<QuizCreateWithoutChoicesInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutChoicesInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
}

export interface ChoiceUpdateInput {
  title?: Maybe<String>;
  quiz?: Maybe<QuizUpdateOneRequiredWithoutChoicesInput>;
}

export interface QuizUpdateOneRequiredWithoutChoicesInput {
  create?: Maybe<QuizCreateWithoutChoicesInput>;
  update?: Maybe<QuizUpdateWithoutChoicesDataInput>;
  upsert?: Maybe<QuizUpsertWithoutChoicesInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizUpdateWithoutChoicesDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface QuizUpsertWithoutChoicesInput {
  update: QuizUpdateWithoutChoicesDataInput;
  create: QuizCreateWithoutChoicesInput;
}

export interface ChoiceUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface QuizCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  choices?: Maybe<ChoiceCreateManyWithoutQuizInput>;
}

export interface ChoiceCreateManyWithoutQuizInput {
  create?: Maybe<ChoiceCreateWithoutQuizInput[] | ChoiceCreateWithoutQuizInput>;
  connect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
}

export interface ChoiceCreateWithoutQuizInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface QuizUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutQuizInput>;
}

export interface ChoiceUpdateManyWithoutQuizInput {
  create?: Maybe<ChoiceCreateWithoutQuizInput[] | ChoiceCreateWithoutQuizInput>;
  delete?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  connect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  set?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  disconnect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  update?: Maybe<
    | ChoiceUpdateWithWhereUniqueWithoutQuizInput[]
    | ChoiceUpdateWithWhereUniqueWithoutQuizInput
  >;
  upsert?: Maybe<
    | ChoiceUpsertWithWhereUniqueWithoutQuizInput[]
    | ChoiceUpsertWithWhereUniqueWithoutQuizInput
  >;
  deleteMany?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  updateMany?: Maybe<
    | ChoiceUpdateManyWithWhereNestedInput[]
    | ChoiceUpdateManyWithWhereNestedInput
  >;
}

export interface ChoiceUpdateWithWhereUniqueWithoutQuizInput {
  where: ChoiceWhereUniqueInput;
  data: ChoiceUpdateWithoutQuizDataInput;
}

export interface ChoiceUpdateWithoutQuizDataInput {
  title?: Maybe<String>;
}

export interface ChoiceUpsertWithWhereUniqueWithoutQuizInput {
  where: ChoiceWhereUniqueInput;
  update: ChoiceUpdateWithoutQuizDataInput;
  create: ChoiceCreateWithoutQuizInput;
}

export interface ChoiceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  OR?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  NOT?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
}

export interface ChoiceUpdateManyWithWhereNestedInput {
  where: ChoiceScalarWhereInput;
  data: ChoiceUpdateManyDataInput;
}

export interface ChoiceUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface QuizUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ChoiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChoiceWhereInput>;
  AND?: Maybe<ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput>;
}

export interface QuizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuizWhereInput>;
  AND?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Choice {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
}

export interface ChoicePromise extends Promise<Choice>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  quiz: <T = QuizPromise>() => T;
}

export interface ChoiceSubscription
  extends Promise<AsyncIterator<Choice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  quiz: <T = QuizSubscription>() => T;
}

export interface ChoiceNullablePromise
  extends Promise<Choice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  quiz: <T = QuizPromise>() => T;
}

export interface Quiz {
  id: ID_Output;
  title: String;
  description?: String;
  createdAt: DateTimeOutput;
}

export interface QuizPromise extends Promise<Quiz>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  choices: <T = FragmentableArray<Choice>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizSubscription
  extends Promise<AsyncIterator<Quiz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  choices: <T = Promise<AsyncIterator<ChoiceSubscription>>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizNullablePromise
  extends Promise<Quiz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  choices: <T = FragmentableArray<Choice>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChoiceConnection {
  pageInfo: PageInfo;
  edges: ChoiceEdge[];
}

export interface ChoiceConnectionPromise
  extends Promise<ChoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChoiceEdge>>() => T;
  aggregate: <T = AggregateChoicePromise>() => T;
}

export interface ChoiceConnectionSubscription
  extends Promise<AsyncIterator<ChoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChoiceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChoiceEdge {
  node: Choice;
  cursor: String;
}

export interface ChoiceEdgePromise extends Promise<ChoiceEdge>, Fragmentable {
  node: <T = ChoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChoiceEdgeSubscription
  extends Promise<AsyncIterator<ChoiceEdge>>,
    Fragmentable {
  node: <T = ChoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChoice {
  count: Int;
}

export interface AggregateChoicePromise
  extends Promise<AggregateChoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChoiceSubscription
  extends Promise<AsyncIterator<AggregateChoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuizConnection {
  pageInfo: PageInfo;
  edges: QuizEdge[];
}

export interface QuizConnectionPromise
  extends Promise<QuizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuizEdge>>() => T;
  aggregate: <T = AggregateQuizPromise>() => T;
}

export interface QuizConnectionSubscription
  extends Promise<AsyncIterator<QuizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuizSubscription>() => T;
}

export interface QuizEdge {
  node: Quiz;
  cursor: String;
}

export interface QuizEdgePromise extends Promise<QuizEdge>, Fragmentable {
  node: <T = QuizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuizEdgeSubscription
  extends Promise<AsyncIterator<QuizEdge>>,
    Fragmentable {
  node: <T = QuizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuiz {
  count: Int;
}

export interface AggregateQuizPromise
  extends Promise<AggregateQuiz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuizSubscription
  extends Promise<AsyncIterator<AggregateQuiz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChoiceSubscriptionPayload {
  mutation: MutationType;
  node: Choice;
  updatedFields: String[];
  previousValues: ChoicePreviousValues;
}

export interface ChoiceSubscriptionPayloadPromise
  extends Promise<ChoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChoicePreviousValuesPromise>() => T;
}

export interface ChoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChoicePreviousValuesSubscription>() => T;
}

export interface ChoicePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
}

export interface ChoicePreviousValuesPromise
  extends Promise<ChoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
}

export interface ChoicePreviousValuesSubscription
  extends Promise<AsyncIterator<ChoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface QuizSubscriptionPayload {
  mutation: MutationType;
  node: Quiz;
  updatedFields: String[];
  previousValues: QuizPreviousValues;
}

export interface QuizSubscriptionPayloadPromise
  extends Promise<QuizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuizPreviousValuesPromise>() => T;
}

export interface QuizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuizPreviousValuesSubscription>() => T;
}

export interface QuizPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  createdAt: DateTimeOutput;
}

export interface QuizPreviousValuesPromise
  extends Promise<QuizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface QuizPreviousValuesSubscription
  extends Promise<AsyncIterator<QuizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Quiz",
    embedded: false
  },
  {
    name: "Choice",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://192.168.99.100:4466`
});
export const prisma = new Prisma();
